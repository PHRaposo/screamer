
(in-package :screamer)

;; Tests for variable types in Screamer with rational support

(defun test-boolean-variable ()
    (let ((x (make-variable)))
         (assert! (booleanpv x))
         (and (known? (booleanpv x))
            (not (known? (notv (booleanpv x))))
            (not (known? (numberpv x)))
            (not (known? (realpv x)))
            (not (known? (rationalpv x)))
            (not (known? (integerpv x)))
            (not (known? (ratiopv x)))
            (not (known? (floatpv x))))))

(defun test-number-variable ()
    (let ((x (make-variable)))
         (assert! (numberpv x))
         (and (known? (numberpv x))
            (not (known? (booleanpv x)))
            (not (known? (notv (numberpv x))))
            (not (known? (realpv x)))
            (not (known? (rationalpv x)))
            (not (known? (integerpv x)))
            (not (known? (ratiopv x)))
            (not (known? (floatpv x))))))

(defun test-real-variable ()
    (let ((x (make-variable)))
        (assert! (realpv x))
        (and (known? (realpv x))
            (known? (numberpv x))
            (not (known? (booleanpv x)))
            (not (known? (rationalpv x)))
            (not (known? (integerpv x)))
            (not (known? (ratiopv x)))
            (not (known? (floatpv x))))))

(defun test-rational-variable ()
    (let ((x (make-variable)))
        (assert! (rationalpv x))
        (and (known? (rationalpv x))
            (known? (realpv x))
            (known? (numberpv x))
            (not (known? (booleanpv x)))
            (not (known? (integerpv x)))
            (not (known? (ratiopv x)))
            (not (known? (floatpv x))))))

(defun test-integer-variable ()
    (let ((x (make-variable)))
        (assert! (integerpv x))
        (and (known? (integerpv x))
            (known? (rationalpv x))
            (known? (realpv x))
            (known? (numberpv x))
            (not (known? (booleanpv x)))
            (not (known? (ratiopv x)))
            (not (known? (floatpv x))))))

(defun test-ratio-variable ()
    (let ((x (make-variable)))
        (assert! (ratiopv x))
        (and (known? (ratiopv x))
            (known? (rationalpv x))
            (known? (realpv x))
            (known? (numberpv x))
            (not (known? (booleanpv x)))
            (not (known? (integerpv x)))
            (not (known? (floatpv x))))))

(defun test-float-variable ()
    (let ((x (make-variable)))
        (assert! (floatpv x))
        (and (known? (floatpv x))
            (known? (realpv x))
            (known? (numberpv x))
            (not (known? (booleanpv x)))
            (not (known? (integerpv x)))
            (not (known? (ratiopv x))))))

(defun test-not-boolean-variable ()
    (let ((x (make-variable)))
        (assert! (notv (booleanpv x)))
        (and (not (known? (booleanpv x)))
                    (known? (notv (booleanpv x)))
                    (not (known? (numberpv x)))
                    (not (known? (realpv x)))
                    (not (known? (rationalpv x)))
                    (not (known? (integerpv x)))
                    (not (known? (ratiopv x)))
                    (not (known? (floatpv x))))))

(defun test-not-number-variable ()
    (let ((x (make-variable)))
        (assert! (notv (numberpv x)))
        (and (not (known? (numberpv x)))
                    (known? (notv (numberpv x)))
                    (not (known? (booleanpv x)))
                    (not (known? (realpv x)))
                    (not (known? (rationalpv x)))
                    (not (known? (integerpv x)))
                    (not (known? (ratiopv x)))
                    (not (known? (floatpv x))))))

(defun test-not-real-variable ()
    (let ((x (make-variable)))
        (assert! (notv (realpv x)))
        (and (not (known? (realpv x)))
                    (known? (notv (realpv x)))
                    (not (known? (numberpv x)))
                    (not (known? (booleanpv x)))
                    (not (known? (rationalpv x)))
                    (not (known? (integerpv x)))
                    (not (known? (ratiopv x)))
                    (not (known? (floatpv x))))))

(defun test-not-rational-variable ()
    (let ((x (make-variable)))
        (assert! (notv (rationalpv x)))
        (and (not (known? (rationalpv x)))
                    (known? (notv (rationalpv x)))
                    (not (known? (realpv x)))
                    (not (known? (numberpv x)))
                    (not (known? (booleanpv x)))
                    (not (known? (integerpv x)))
                    (not (known? (ratiopv x)))
                    (not (known? (floatpv x))))))

(defun test-not-integer-variable ()
    (let ((x (make-variable)))
        (assert! (notv (integerpv x)))
        (and (not (known? (integerpv x)))
                    (known? (notv (integerpv x)))
                    (not (known? (rationalpv x)))
                    (not (known? (realpv x)))
                    (not (known? (numberpv x)))
                    (not (known? (booleanpv x)))
                    (not (known? (ratiopv x)))
                    (not (known? (floatpv x))))))

(defun test-not-ratio-variable ()
    (let ((x (make-variable)))
        (assert! (notv (ratiopv x)))
        (and (not (known? (ratiopv x)))
                    (known? (notv (ratiopv x)))
                    (not (known? (rationalpv x)))
                    (not (known? (realpv x)))
                    (not (known? (numberpv x)))
                    (not (known? (booleanpv x)))
                    (not (known? (integerpv x)))
                    (not (known? (floatpv x))))))

(defun test-not-float-variable ()
    (let ((x (make-variable)))
        (assert! (notv (floatpv x)))
        (and (not (known? (floatpv x)))
                    (known? (notv (floatpv x)))
                    (not (known? (realpv x)))
                    (not (known? (numberpv x)))
                    (not (known? (booleanpv x)))
                    (not (known? (integerpv x)))
                    (not (known? (ratiopv x))))))

;; Run all tests
(defun run-variable-type-tests ()
 (apply #'andv
  (mapcar #'funcall
    (list #'test-boolean-variable
                #'test-number-variable
                #'test-real-variable
                #'test-rational-variable
                #'test-integer-variable
                #'test-ratio-variable
                #'test-float-variable
                #'test-not-boolean-variable
                #'test-not-number-variable
                #'test-not-real-variable
                #'test-not-rational-variable
                #'test-not-integer-variable
                #'test-not-ratio-variable
                #'test-not-float-variable))))
